// Code generated by MockGen. DO NOT EDIT.
// Source: ./report.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	report "github.com/mdcabezas/reportiny/internal/report"
)

// MockIReport is a mock of IReport interface.
type MockIReport struct {
	ctrl     *gomock.Controller
	recorder *MockIReportMockRecorder
}

// MockIReportMockRecorder is the mock recorder for MockIReport.
type MockIReportMockRecorder struct {
	mock *MockIReport
}

// NewMockIReport creates a new mock instance.
func NewMockIReport(ctrl *gomock.Controller) *MockIReport {
	mock := &MockIReport{ctrl: ctrl}
	mock.recorder = &MockIReportMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIReport) EXPECT() *MockIReportMockRecorder {
	return m.recorder
}

// DeleteReport mocks base method.
func (m *MockIReport) DeleteReport(id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReport", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteReport indicates an expected call of DeleteReport.
func (mr *MockIReportMockRecorder) DeleteReport(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReport", reflect.TypeOf((*MockIReport)(nil).DeleteReport), id)
}

// GetReport mocks base method.
func (m *MockIReport) GetReport() *[]report.ResponseDTO {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReport")
	ret0, _ := ret[0].(*[]report.ResponseDTO)
	return ret0
}

// GetReport indicates an expected call of GetReport.
func (mr *MockIReportMockRecorder) GetReport() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReport", reflect.TypeOf((*MockIReport)(nil).GetReport))
}

// PostReport mocks base method.
func (m *MockIReport) PostReport(arg0 report.RequestDTO) (report.ResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PostReport", arg0)
	ret0, _ := ret[0].(report.ResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PostReport indicates an expected call of PostReport.
func (mr *MockIReportMockRecorder) PostReport(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PostReport", reflect.TypeOf((*MockIReport)(nil).PostReport), arg0)
}

// UpdateReport mocks base method.
func (m *MockIReport) UpdateReport(id string, b report.RequestDTO) (report.ResponseDTO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReport", id, b)
	ret0, _ := ret[0].(report.ResponseDTO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReport indicates an expected call of UpdateReport.
func (mr *MockIReportMockRecorder) UpdateReport(id, b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReport", reflect.TypeOf((*MockIReport)(nil).UpdateReport), id, b)
}
